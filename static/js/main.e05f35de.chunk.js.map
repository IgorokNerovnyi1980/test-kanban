{"version":3,"sources":["variables.js","redux/types.js","redux/actions.js","components/Task.jsx","components/NewTask.jsx","components/Column.jsx","pages/Board.jsx","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["variables","Type","putColumnsInState","obj","type","payload","putTasksInState","arr","updateColumns","dispatch","a","updateTasks","Wrapper","styled","div","Content","Task","this","props","id","text","index","draggableId","provided","draggableProps","dragHandleProps","ref","innerRef","Component","Form","form","BtnBox","Btn","button","width","bg","left","center","hover","Icon","span","connect","state","tasks","columns","columnId","useState","isOpen","setIsOpen","inputValue","setInputValue","onSubmit","e","preventDefault","value","rowId","newObj","shortid","generate","row","seq_num","result","newColumn","taskIds","newobjColumns","createNewTask","slice","onChange","target","onClick","Title","bgTitle","Column","title","length","droppableId","className","droppableProps","map","key","placeholder","Box","Board","newTaskPosition","updateTasksPosition","task","find","sortTasks","render","column","filter","onDragEnd","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newTaskIds","columnName","GlobalStyle","createGlobalStyle","App","initialState","row_0","row_1","row_2","row_3","reducer","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","basename","component","document","getElementById"],"mappings":"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","file":"static/js/main.e05f35de.chunk.js","sourcesContent":["export const variables = {\n    //backgrounds\n    mainBG: '#35383f',\n    secondaryBG: '#2b2d33',\n    taskBG:'#191a1d',\n    textAreaBG:'#4f463e',\n    accentBG:'#6a7d7d',\n    //colors\n    mainClr: 'white',\n    secondaryClr:'grey',\n    //font-sizes\n    titleFZ: '1.3em',\n    mainFZ: '1em',\n    secondayFZ: '0.8em',\n    iconFZ:'1.8em',\n    //box-shadow\n    // other\n    //media\n    mediaW_1: '720px',\n    mediaW_11: '721px',\n    mediaW_2: '940px',\n    mediaW_3: '1200px'\n};","export const Type = {\n    UPDATE_COLUMN:'UPDATE_COLUMN',\n    UPDATE_TASKS:'UPDATE_TASKS'\n};","// import axios from 'axios';\nimport {Type} from './types';\n\nfunction putColumnsInState(obj) {\n    return {type: Type.UPDATE_COLUMN, payload: obj};\n};\n\nfunction putTasksInState(arr) {\n    return {type: Type.UPDATE_TASKS, payload: arr};\n};\n\nexport const updateColumns = (obj) => {\n\n    return async function (dispatch) {\n        \n            dispatch(putColumnsInState(obj));\n    };\n};\n\nexport const updateTasksPosition = (arr) => {\n    \n    return async function (dispatch) {\n        \n        dispatch(putTasksInState(arr));\n};\n};\n\nexport const updateTasks = (arr) => {\n    return async function (dispatch) {\n        \n        dispatch(putTasksInState(arr));\n};\n}","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport {variables} from '../variables';\nimport {Draggable}from 'react-beautiful-dnd';\n\nconst Wrapper = styled.div`\n    width:95%;\n    min-height:50px;\n    background-color:${variables.taskBG};\n    margin-top:10px;\n    :last-child{\n        margin-bottom:10px;\n    }\n`;\nconst Content = styled.div`\n    padding:5px;\n    span{\n        font-weight:bold;\n        color:${variables.mainClr};\n    }\n    p{\n        padding-top:10px;\n        color:${variables.secondaryClr};\n        :last-child{\n            padding-bottom:10px;\n        }\n    }\n`;\n\nclass Task extends Component{\n\n    render(){\n        const {\n            id,\n            text,\n            index\n        } = this.props;\n\n        return(\n            <Draggable\n                draggableId={id}\n                index={index}\n                >\n                {(provided) => (\n                    <Wrapper\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                        ref={provided.innerRef}\n                    >\n                        <Content>\n                            <p><span>id:</span> {id}</p>\n                            <p>{text}</p>\n                        </Content>\n                    </Wrapper>\n                )}\n                </Draggable>\n\n        )\n\n    }\n};\n\nexport default Task;","import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport {variables} from '../variables';\nimport {connect} from 'react-redux';\nimport {updateTasks, updateColumns} from '../redux/actions';\nimport shortid from 'shortid';\n\nconst Form = styled.form`\n    width:100%;\n    margin-top:10px;\n    padding:5px 10px;\n    display:flex;\n    flex-direction:column;\n    align-items:center;   \n    textArea{\n        padding:5px;\n        min-width:100%;\n        min-height:100px;\n        resize:none;\n        background-color:${variables.textAreaBG};\n        color:${variables.secondaryClr};\n        \n    };\n`;\n\nconst BtnBox = styled.div`\n    width:100%;\n    margin-top:10px;\n    display:flex;\n    justify-content:flex-start;\n    align-items:center;\n`;\n\nconst Btn = styled.button`\n    min-width: ${props => props.width ? '60%': '10%'};\n    height:40px;\n    background-color:${props => props.bg ? `${variables.textAreaBG}`: `${variables.secondaryBG}`};\n    margin-left:${props => props.left ? '5px' : 'unset'};\n    display:flex;\n    justify-content:${props => props.center ? 'center': 'flex-start'};\n    align-items:center;\n    color:${variables.secondaryClr};\n    cursor:pointer;\n    transition:0.2s;\n    :hover{\n        background-color:${props => props.hover ? `${variables.taskBG}` : 'unset'};\n    }\n    p{\n        padding-left:10px;\n    }\n`;\n\nconst Icon = styled.span`\n    font-size:${variables.iconFZ};\n`;\n\nconst NewTask = (\n    {\n        columnId,\n        updateTasks,\n        tasks,\n        updateColumns,\n        columns\n\n    }) => {\n\n    const [ isOpen, setIsOpen ] = useState(false);\n    const [ inputValue, setInputValue ] = useState('');\n\n    const createNewTask = (value, rowId) => {\n        const newObj = {\n            id: shortid.generate(),\n            row: rowId,\n            seq_num: 0,\n            text: value\n            };\n        const result = [...tasks, newObj];\n            updateTasks(result);\n            \n         const newColumn = {\n            ...columns[columnId],\n            taskIds: [...columns[columnId].taskIds, newObj.id]\n            };\n         const newobjColumns = {...columns,[columnId]: newColumn }; \n         updateColumns(newobjColumns);\n\n    }\n\n    const handleOpen = () => {\n        setIsOpen(true);\n    };\n\n    const handleClose = () => {\n        setIsOpen(false);\n    };\n\n    const handleSubmmit = e => {\n        e.preventDefault();\n        createNewTask(inputValue,columnId.slice(-1));\n        setInputValue('');\n        setIsOpen(false);\n    };\n\n    const changeInputValue = e => {\n        setInputValue(e.target.value);\n    };\n\n    return(\n        \n            isOpen ? \n                <Form onSubmit={handleSubmmit}>\n                    <textarea\n                        onChange={changeInputValue}\n                        value={inputValue}\n                    />\n                    <BtnBox>\n                        <Btn \n                            type='submit'\n                            width \n                            bg\n                            center\n                            hover\n                            \n                        >\n                            Добавить карточку\n                        </Btn>\n                        <Btn \n                            left\n                            hover\n                            center\n                            onClick={handleClose}\n                        >\n                            <Icon>&#215;</Icon>\n                        </Btn>\n                    </BtnBox>\n                </Form> \n            : \n            <Btn onClick={handleOpen} >\n                <Icon>&#43;</Icon>\n            <p>Добавить карточку</p>\n            </Btn>\n        )\n};\n\nconst STP = state => (\n    {\n        tasks:state.tasks,\n        columns:state.columns\n    });\n\nconst DTP = dispatch => ({\n    updateTasks: arr => dispatch(updateTasks(arr)),\n    updateColumns: obj => dispatch(updateColumns(obj))\n});\n\nexport default connect(STP, DTP)(NewTask);","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport {variables} from '../variables';\nimport {Droppable} from 'react-beautiful-dnd';\n//components\nimport Task from './Task';\nimport NewTask from './NewTask';\n\nconst Wrapper = styled.div`\n    width:20%;\n    min-width:100px;\n    min-height:30px;\n    background-color:${variables.secondaryBG};\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    align-items:center;\n    .taskBox{\n        width:100%;\n        display:flex;\n        flex-direction:column;\n        justify-content:center;\n        align-items:center;\n    }\n`;\n\nconst Title = styled.div`\n    width:100%;\n    padding:10px 0;\n    background-color:${props => props.bgTitle};\n    display:flex;\n    justify-content:flex-start;\n    align-items:center;\n    font-size:${variables.titleFZ};\n    h3{\n        padding-left:10px;  \n    }\n    p{\n        padding-left:5px; \n    }  \n`;\n\nclass Column extends Component{\n    render(){\n       const {\n        title = 'default',\n        bgTitle = `${variables.accentBG}`,\n        tasks = [],\n        columnId = ''\n\n        } = this.props;\n\n        return(\n            <Wrapper>\n                <Title bgTitle={bgTitle}>\n                    <h3>{title}</h3>\n                    {tasks.length === 0 ? null : <p>({tasks.length})</p>}\n                </Title>\n                <Droppable droppableId={columnId}>\n                    {(provided) => (\n                        <div className=\"taskBox\"\n                            ref={provided.innerRef}\n                            {...provided.droppableProps}\n                        >\n                        \n                                {tasks && tasks.map(({id, text}, index)=> (\n                                    <Task \n                                        key={id}\n                                        id={id}\n                                        text={text}\n                                        index={index}\n                                    />\n                                    ))}\n                            {provided.placeholder}\n                        </div>\n                        \n                    )}\n                </Droppable>\n                <NewTask columnId={columnId}/>\n            </Wrapper>\n        )\n    }\n};\n\nexport default Column;","import React, {Component} from 'react';\nimport styled from 'styled-components';\nimport {variables} from '../variables';\nimport {connect} from 'react-redux';\nimport {DragDropContext} from 'react-beautiful-dnd';\nimport {updateColumns,\n        updateTasksPosition,\n        updateTasks} from '../redux/actions';\n//Components\nimport Column from '../components/Column';\n\nconst Wrapper = styled.div`\n    width:100vw;\n    min-height:100vh ;\n    background-color:${variables.mainBG};\n    display:flex;\n    justify-content:center;\n    align-items:flex-start;\n`;\nconst Box = styled.div`\n    width:95vw;\n    margin-top:50px;\n    display:flex;\n    justify-content:space-between;\n    align-items:flex-start;\n`;\n\nclass Board extends Component {\n\n    newTaskPosition = (arr, columnId) => {\n        const { tasks, updateTasksPosition } = this.props;\n        const result = tasks.map( task => {\n            const findId = arr.find(id => (id === task.id));\n            const item = findId ? {...task,row:columnId} : {...task}; \n            return item;\n        });\n\n        updateTasksPosition(result);\n    };\n\n    sortTasks = () => {\n        const { tasks,columns,render, updateColumns } = this.props;\n\n        let result = {};\n\n        render.map(column => {\n\n            const newColumn = {\n            ...columns[column],\n            taskIds: tasks.filter( (task) => task.row === columns[column].id).map((task) => task.id)\n            };\n            return result = {...result,[column]: newColumn };       \n    })\n\n    return updateColumns(result);\n    };\n\n    onDragEnd = result => {\n        const { destination, source, draggableId } = result;\n        const { props:{columns, updateColumns}, newTaskPosition } = this;\n\n        if(!destination){ return;}\n        if(\n            destination.droppableId === source.droppableId &&\n            destination.index === source.index\n        ){\n            return;\n        };\n\n        const start = columns[source.droppableId];\n        const finish = columns[destination.droppableId];\n        if(start === finish){\n            const newTaskIds = Array.from(start.taskIds);\n            newTaskIds.splice(source.index,1);\n            newTaskIds.splice(destination.index, 0, draggableId);\n            const newColumn = {\n                ...start,\n                taskIds:newTaskIds,\n            };\n            const newDataForState = {...columns, [`row_${newColumn.id}`]:newColumn };\n            updateColumns(newDataForState);\n            return;\n        }\n\n        const startTaskIds =Array.from(start.taskIds);\n        startTaskIds.splice(source.index,1);\n        const newStart = {\n            ...start,\n            taskIds:startTaskIds\n        };\n        const finishTaskIds =Array.from(finish.taskIds);  \n        finishTaskIds.splice(destination.index, 0, draggableId);\n        const newFinish = {\n            ...finish,\n            taskIds:finishTaskIds\n        };\n        newTaskPosition(finishTaskIds,newFinish.id);\n\n        const newDataForState = {\n                ...columns,\n                [`row_${newStart.id}`]:newStart,\n                [`row_${newFinish.id}`]:newFinish  \n            };\n        updateColumns(newDataForState);\n    };\n\n    componentDidMount(){\n\n        this.sortTasks();\n    }\n\n \n    render(){\n        const {\n                props:{\n                    render,\n                    tasks,\n                    columns  \n                },\n                onDragEnd } = this;\n        return(\n            <Wrapper>\n                <Box>\n                <DragDropContext\n                     onDragEnd={onDragEnd}\n                    >\n                    {render.map(columnName =>(\n                        <Column \n                            key={columnName}\n                            columnId={`row_${columns[columnName].id}`}\n                            bgTitle={columns[columnName].bg}\n                            title={columns[columnName].title}\n                            tasks={columns[columnName].taskIds.map(id =>(\n                                tasks.find(task => task.id === id)\n                            ))}\n                        />\n                    ))}\n                     </DragDropContext>\n                </Box>    \n            </Wrapper>\n        )\n    }\n\n};\n\nconst STP = state => (\n    {\n        render: state.render,\n        tasks:state.tasks,\n        columns:state.columns\n    });\n\nconst DTP = dispatch => ({\n    updateColumns: obj => dispatch(updateColumns(obj)),\n    updateTasksPosition: arr => dispatch(updateTasksPosition(arr)),\n    updateTasks: arr => dispatch(updateTasks(arr))\n});\n\nexport default connect(STP, DTP)(Board);","import React from 'react';\nimport {createGlobalStyle} from 'styled-components';\nimport {variables} from './variables';\n//pages\nimport Board from './pages/Board';\n\n\nconst GlobalStyle = createGlobalStyle `\n  * {\n    box-sizing: border-box;\n  }\n\n  *:after, *:before {\n    box-sizing: inherit;\n  }\n\n  p, ul, li, h1, h2, h3, h4 ,h5 ,h6, html, body{\n    margin: 0;\n    padding: 0;\n  }\n  h1, h2, h3, h4,h5, h6{\n    font-weight: normal;\n  }\n  input, textarea, button{\n    outline: none;\n    border:none;\n  }\n  body{\n    font-family: 'Helvetica', sans-serif;\n    font-size: 14px;\n    color:${variables.mainClr};\n    font-weight: 400;\n    min-width: 320px;\n    overflow-x: hidden;\n    background: #ffffff;\n    line-height: normal;\n  }\n\n  @media (min-width: 1921px) {\n  body {\n    font-size: 16px;\n  }\n}\n`;\n\nfunction App() {\n\n    return (\n        <> \n        < GlobalStyle /> \n          <Board />\n        </>\n    );\n}\n\nexport default App;\n","import {Type} from './types';\n\nconst initialState = {\n    tasks: [\n        {id: '0', row: \"1\", seq_num: 0, text: \"redux 2\" },\n        {id: '1', row: \"0\", seq_num: 0, text: \"redux 3\" },\n        {id: '2', row: \"0\", seq_num: 0, text: \"redux 4\" },\n        {id: '3', row: \"2\", seq_num: 0, text: \"redux 6\" },\n        {id: '4', row: \"2\", seq_num: 0, text: \"redux 7\" },\n        {id: '5', row: \"2\", seq_num: 0, text: \"redux 8\" },\n        {id: '6', row: \"2\", seq_num: 0, text: \"redux 9\" },\n    ],\n\n    columns:{\n        row_0:{title:'ON-HOLD', bg: '#fb7e46', id:'0', taskIds:[] },\n        row_1:{title:'IN-PROGRESS', bg: '#2a92bf', id:'1', taskIds:[]},\n        row_2:{title:'NEEDS-REVIEW', bg: '#f4ce46', id:'2', taskIds:[]},\n        row_3:{title:'APPROVED', bg: '#00b961', id:'3', taskIds:[]}\n    }\n    ,\n    render:[ 'row_0', 'row_1', 'row_2', 'row_3' ],\n\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case Type.UPDATE_COLUMN:\n            return{\n                ...state,\n                columns:action.payload\n            };\n        case Type.UPDATE_TASKS:\n            return{\n                ...state,\n                tasks:action.payload\n            };\n        default:\n            return state;\n    }\n};\nexport default reducer;","import {createStore, applyMiddleware} from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport rootReducer from './reducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {HashRouter, Route} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <HashRouter basename=\"/\">\n            <Route component={App}/>\n        </HashRouter>\n    </Provider>,\n    document.getElementById(\n        'root'\n    )\n);\n"],"sourceRoot":""}